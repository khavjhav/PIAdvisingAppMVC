@model IEnumerable<PIAdvisingApp.ViewModels.BondDataVm>


<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"><!-- Example using CDN -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>


<!-- Bootstrap JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<style>
    .table-container {
        position: relative;
    }

        .table-container thead {
            position: sticky;
            top: 0;
            background-color: #343a40;
            color: #fff;
            z-index: 1;
        }

    #productModal {
        z-index: 9999;
    }

    /* Increase the z-index of modal backdrop */
    .modal-backdrop {
        z-index: 0 !important;
    }
</style>

<!-- Master Section Card -->
<div class="card mb-3">
    <div class="card-header">ADVISE NO. @Model.First().ApiNumber</div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <p><strong>Customer Name:</strong> @Model.First().CustomerName</p>
                <p><strong>Retailer Name:</strong> @Model.First().RetailerName</p>
                @*<p><strong>Advising Bank:</strong> @Model.First().RetailerName</p>*@
                <p><strong>Representative:</strong> @Model.First().ShortName</p>
                @*<p><strong>Issued To:</strong> @Model.First().RetailerName</p>*@
                @*<p><strong>CM Rep:</strong> @Model.First().RetailerName</p>*@



            </div>
            <div class="col-md-4">
                @*<p><strong>Total Value:</strong> @Model.First().TotalValue</p>
                    <p><strong>Total Quantity:</strong> @Model.First().TotalQty</p>*@

                <div id="totalValueDiv">
                    <p><strong>Total Value:</strong> @Model.First().TotalValue</p>
                </div>
                <div id="totalQtyDiv">
                    <p><strong>Total Quantity:</strong> @Model.First().TotalQty</p>
                </div>
                <p><strong>Remarks:</strong> @Model.First().Remarks</p>
                @*<p><strong>Address:</strong> @Model.First().RetailerName</p>*@
                <div class="form-group">
                    <label for="commercial-remarks"><strong>Commercial Remarks:</strong></label>
                    <textarea class="form-control" id="commercial-remarks" name="commercial-remarks" rows="3" style="width: 350px; height: 90px; resize: both;"></textarea>
                    <button type="button" class="btn btn-primary mt-2" id="saveCommercialRemarksBtn">Save</button>
                </div>

            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="companyName"><strong>Company Name:</strong></label>
                    <div class="input-group">
                        <select class="form-control" id="companyName" name="companyName">
                            <option value="">Choose Company</option>
                            <option value="1">KDS Accessories Ltd.</option>
                            <option value="2">KDS Thread Ltd.</option>
                            <option value="3">KDS Poly Industries Ltd.</option>
                            @*<option value="4">Dominox IM</option>*@
                            <option value="5">KDS Accessories Ltd. (Unit 2)</option>
                            <option value="6">KDS Thread Ltd. (Unit 2)</option>
                        </select>
                        <div class="input-group-append">
                            <button class="btn btn-primary" id="setCompanyButton" disabled>Set</button>
                        </div>
                    </div>
                </div>
                <!-- Our Reference text input field -->
                <div class="row mt-3">
                    <div class="col-md-6">
                        <label for="our-reference">Our Reference:</label>
                        <textarea class="form-control" id="our-reference" name="our-reference" rows="3" style="width: 250px; height: 90px; resize: both;" readonly>@Model.First().OurRef</textarea>
                    </div>
                    <div class="col-md-6">
                        <label for="customer-reference">Customer Reference:</label>
                        <textarea class="form-control" id="customer-reference" name="customer-reference" rows="3" style="width: 250px; height: 90px; resize: both;" readonly>@Model.First().CustomerRef</textarea>
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>

<!-- Include Info Section Card -->
<div class="card mb-3">
    <div class="card-header">Include Info</div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check1" data-label="PO">
                    <label class="form-check-label" for="check1">PO</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check2" data-label="Style">
                    <label class="form-check-label" for="check2">Style</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check3" data-label="Size">
                    <label class="form-check-label" for="check3">Size</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check4" data-label="Colour">
                    <label class="form-check-label" for="check4">Colour</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check5" data-label="BreakDown1">
                    <label class="form-check-label" for="check5">BreakDown1</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check6" data-label="BreakDown2">
                    <label class="form-check-label" for="check6">BreakDown2</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check7" data-label="Shade">
                    <label class="form-check-label" for="check7">Shade</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check8" data-label="WashType">
                    <label class="form-check-label" for="check8">Wash Type</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check9" data-label="GSM">
                    <label class="form-check-label" for="check9">GSM</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input include-info" type="checkbox" id="check10" data-label="KBPNo">
                    <label class="form-check-label" for="check10">KBP No</label>
                </div>
            </div>
        </div>
        <div class="mt-2">
            <button class="btn btn-primary" id="addItemButton">Add</button>
            <button class="btn btn-secondary">Copy</button>
            <button class="btn btn-primary refresh-button">Refresh</button>
        </div>
    </div>
</div>


@*include item section*@
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Row</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Editable fields -->
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="editProductName">Product Name</label>
                            @if (ViewBag.ProductNameList != null)
                            {
                                <select class="form-control select2" id="productId" name="productId">
                                    <option value="">Select Product</option>
                                    @foreach (var item in ViewBag.ProductNameList)
                                    {
                                        <option value="@item.ProductId">@item.ProductName</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="form-group">
                            <label for="editCombination">Combination</label>
                            <input type="text" class="form-control" id="editCombination">
                        </div>
                        <div class="form-group">
                            <label for="editPly">No. of Ply</label>
                            <select class="form-control" id="editPly">
                                <option value="1">1</option>
                                <option value="3">3</option>
                                <option value="5">5</option>
                                <option value="7">7</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editMeasureUnit">Measure Unit</label>
                            <select class="form-control" id="editMeasureUnit">
                                <option value="CM">CM</option>
                                <option value="INCH">INCH</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editLength">Length</label>
                            <input type="number" step="any" class="form-control" id="editLength">
                        </div>
                        <div class="form-group">
                            <label for="editWidth">Width</label>
                            <input type="number" step="any" class="form-control" id="editWidth">
                        </div>
                        <div class="form-group">
                            <label for="editHeight">Height</label>
                            <input type="number" step="any" class="form-control" id="editHeight">
                        </div>
                        <div class="form-group">
                            <label for="editBookingQty">Booking Qty</label>
                            <input type="number" step="any" class="form-control" id="editBookingQty">
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="editShadeNumber">Shade Number</label>
                            <input type="text" class="form-control" id="editShadeNumber">
                        </div>
                        <div class="form-group">
                            <label for="editWashType">Wash Type</label>
                            <input type="text" class="form-control" id="editWashType">
                        </div>
                        <div class="form-group">
                            <label for="editPrinted">Printed</label>
                            <select class="form-control" id="editPrinted">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editPerforated">Perforated</label>
                            <select class="form-control" id="editPerforated">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editQuantityUnit">Quantity Unit</label>
                            <select class="form-control" id="editQuantityUnit">
                                <option value="Pcs">Pcs</option>
                                <option value="Dozens">Dozens</option>
                                <option value="KGs">KGs</option>
                                <option value="SQM">SQM</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="editUnitPrice">Unit Price</label>
                            <input type="number" step="any" class="form-control" id="editUnitPrice">
                        </div>
                        <div class="form-group">
                            <label for="editTotalAmount">Total Amount</label>
                            <input type="number" step="any" class="form-control" id="editTotalAmount">
                        </div>
                        <div class="form-group">
                            <label for="editQtyInKG">Qty In KG</label>
                            <input type="number" step="any" class="form-control" id="editQtyInKG">
                        </div>
                        <!-- Add more fields here -->
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="editGSM">GSM</label>
                            <input type="number" step="1" class="form-control" id="editGSM">
                        </div>
                        <div class="form-group">
                            <label for="editPONumber">PO Number</label>
                            <input type="text" class="form-control" id="editPONumber">
                        </div>
                        <div class="form-group">
                            <label for="editStyleRef">Style Ref</label>
                            <input type="text" class="form-control" id="editStyleRef">
                        </div>
                        <div class="form-group">
                            <label for="editColor">Color</label>
                            <input type="text" class="form-control" id="editColor">
                        </div>
                        <div class="form-group">
                            <label for="editSize">Size</label>
                            <input type="text" class="form-control" id="editSize">
                        </div>
                        <div class="form-group">
                            <label for="editBreakDown">Break Down</label>
                            <input type="text" class="form-control" id="editBreakDown">
                        </div>
                        <div class="form-group">
                            <label for="editWeightInKG">Weight in KG</label>
                            <input type="number" step="any" class="form-control" id="editWeightInKG">
                        </div>
                        <div class="form-group">
                            <label for="editVal2">Value</label>
                            <input type="number" step="any" class="form-control" id="editVal2">
                        </div>
                        <!-- Add more fields here -->
                    </div>
                </div>
                <!-- Add more row-columns as needed -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveChangesBtn">Save changes</button>
            </div>
        </div>
    </div>
</div>



<!-- Table Section -->
<div class="card">
    <div class="card-body">
        <div class="table-container" style="max-height: calc(80vh - 250px); overflow-y: auto;">
            <table class="table mt-3 table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th class="text-center d-none">Api No.</th>

                        <th class="text-center">Product Name</th>
                        <th class="text-center">Measurement</th>
                        <th class="text-center">Measure Unit</th>
                        <th class="text-center">Booking Qty</th>
                        <th class="text-center">Qty In KG</th>
                        <th class="text-center">Quantity Unit</th>
                        <th class="text-center">Unit Price</th>
                        <th class="text-center">Value</th>
                        <th class="text-center">PO Number</th>
                        <th class="text-center">Style Ref</th>
                        <th class="text-center">Color</th>
                        <th class="text-center">BreakDown1</th>
                        <th class="text-center">BreakDown2</th>
                        <th class="text-center">Shade Number</th>
                        <th class="text-center">Wash Type</th>
                        <th class="text-center">GSM</th>
                        <th class="text-center">Actions</th>
                        <th class="text-center d-none">BSID</th>
                        <th class="text-center d-none">Product Id</th>
                        <th class="text-center d-none">Length</th>
                        <th class="text-center d-none">Width</th>
                        <th class="text-center d-none">Height</th>
                        <th class="text-center d-none">IsPerforated</th>
                        <th class="text-center d-none">IsPrinted</th>




                        <!-- ... Include Info columns if needed ... -->

                    </tr>
                </thead>
                <tbody>
                    @{

                        var groupedData = Model.GroupBy(x => new
                        {
                            x.ProductName,
                            x.Measurement,
                            x.MeasureUnit,
                            x.QuantityUnit,
                            //x.UnitPrice,
                            x.ApiNumber,
                            x.ProductId,
                            x.BookingSubId,
                            x.IsPerforated,
                            x.IsPrinted,
                            x.Length,
                            x.Width,
                            x.Height
                        })
                                               .Select(g => new
                                               {
                                                   ProductName = g.Key.ProductName,
                                                   ApiNumber = g.Key.ApiNumber,
                                                   PONumber = string.Join(",", g.Select(x => x.PONumber).Distinct()), // Merge PO Numbers
                                                   StyleRef = string.Join(",", g.Select(x => x.StyleRef).Distinct()), // Merge Style Refs
                                                   Color = string.Join(",", g.Select(x => x.Color).Distinct()), // Merge Colors
                                                   BreakDown1 = string.Join(",", g.Select(x => x.BreakDown1).Distinct()), // Merge BreakDown1s
                                                   BreakDown2 = string.Join(",", g.Select(x => x.BreakDown2).Distinct()), // Merge BreakDown2s
                                                   ShadeNumber = string.Join(",", g.Select(x => x.ShadeNumber).Distinct()), // Merge Shade Numbers
                                                   WashType = string.Join(",", g.Select(x => x.WashType).Distinct()), // Merge Wash Types
                                                   GSM = string.Join(",", g.Select(x => x.GSM).Distinct()), // Merge GSMs
                                                   Measurement = g.Key.Measurement,
                                                   MeasureUnit = g.Key.MeasureUnit,
                                                   Length = g.Key.Length,
                                                   Width = g.Key.Width,
                                                   Height = g.Key.Height,
                                                   IsPerforated = g.Key.IsPerforated,
                                                   IsPrinted = g.Key.IsPrinted,
                                                   ProductId = g.Key.ProductId,
                                                   BookingSubId = g.Key.BookingSubId,
                                                   BookingQty = g.Sum(x => x.BookingQty),
                                                   QtyInKG = g.Sum(x => x.QtyInKG),
                                                   QuantityUnit = g.Key.QuantityUnit,
                                                   //UnitPrice = g.Key.UnitPrice,
                                                   UnitPrice = g.Average(x => x.UnitPrice),
                                                   Val2 = g.Sum(x => x.Val2),

                                                   // Add other properties ...
                                               });


                        var totalBookingQty = groupedData.Sum(g => g.BookingQty);
                        var totalQtyInKG = groupedData.Sum(g => g.QtyInKG);
                        var totalValue = groupedData.Sum(g => g.Val2);
                    }

                    @foreach (var item in groupedData)
                    {
                        <tr data-row-id="@item.ApiNumber">

                            <td class="text-center d-none">@item.ApiNumber</td>
                            <td class="text-center">@item.ProductName</td>
                            <td class="text-center measurement">@item.Measurement</td>
                            <td class="text-center">@item.MeasureUnit</td>
                            <td class="text-center booking-qty">@item.BookingQty</td>
                            <td class="text-center qty-in-kg">@item.QtyInKG</td>
                            <td class="text-center">@item.QuantityUnit</td>
                            <td class="text-center">@item.UnitPrice</td>
                            <td class="text-center value">@item.Val2</td>
                            <td class="text-center">@item.PONumber</td>
                            <td class="text-center">@item.StyleRef</td>
                            <td class="text-center">@item.Color</td>
                            <td class="text-center">@item.BreakDown1</td>
                            <td class="text-center">@item.BreakDown2</td>
                            <td class="text-center">@item.ShadeNumber</td>
                            <td class="text-center">@item.WashType</td>
                            <td class="text-center">@item.GSM</td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button class="btn btn-primary btn-sm edit-row-button" data-toggle="modal" data-target="#editModal" data-row-id="@item.ApiNumber">Edit</button>
                                    <button class="btn btn-danger btn-sm remove-row-button">Remove</button>
                                </div>
                            </td>
                            <td class="text-center d-none booking-sub-id">@item.BookingSubId</td>
                            <td class="text-center d-none product-id">@item.ProductId</td>
                            <td class="text-center d-none length">@item.Length</td>
                            <td class="text-center d-none width">@item.Width</td>
                            <td class="text-center d-none height">@item.Height</td>
                            <td class="text-center d-none is-perforated">@item.IsPerforated</td>
                            <td class="text-center d-none is-printed">@item.IsPrinted</td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>
</div>

<!-- Total Footer -->
<div class="card mt-3">
    <div class="card-body">
        <table class="table table-bordered mb-0">
            <tfoot class="thead-dark">
                <tr>
                    <td colspan="3" class="text-center"><strong>Total Booking Quantity:</strong> <span id="totalBookingQtyValue">@totalBookingQty</span></td>
                    <td colspan="3" class="text-center"><strong>Total Quantity (KG):</strong> <span id="totalQtyInKGValue">@totalQtyInKG</span></td>
                    <td colspan="3" class="text-center"><strong>Total Value:</strong> <span id="totalValueValue">@totalValue</span></td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>




<div class="modal-footer">
    <button type="button" class="btn btn-primary" id="saveButton" disabled>Save</button>
    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
</div>

@*<div id="product-modal-container"></div>*@







<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
        $(document).ready(function () {
            let selectedCompanyId = null;

            // Handle company name dropdown change event
            $('#companyName').change(function () {
                selectedCompanyId = $(this).val();
                const isCompanySelected = !!selectedCompanyId;
                $('#setCompanyButton').prop('disabled', !isCompanySelected);
                $('#saveButton').prop('disabled', !isCompanySelected);
            });

            // Handle Set button click event
            $('#setCompanyButton').click(function () {
                // If you want to do something when the Set button is clicked,
                // you can perform additional actions here.
                // For example, you can update the UI to reflect the selected company.
            });
             // Function to toggle column visibility based on checkbox state
        function toggleColumn(columnIndex, visible) {
            $('table tr').each(function () {
                $(this).find('td, th').eq(columnIndex).toggle(visible);
            });
        }

        // Function to bind checkbox change event
        function bindCheckboxEvent(checkboxId, columnIndex) {
            // Get the checkbox element
            var checkbox = $('#' + checkboxId);

            // Get the initial state of the checkbox (checked or unchecked)
            var isChecked = checkbox.prop('checked');

            // Hide or show the corresponding column based on the initial checkbox state
            toggleColumn(columnIndex, isChecked);

            // Bind change event to the checkbox
            checkbox.on('change', function () {
                var isVisible = $(this).prop('checked');
                toggleColumn(columnIndex, isVisible);
            });
        }

        // Bind checkboxes to their respective columns
        $(document).ready(function () {
            bindCheckboxEvent('check1', 9);  // PO Number, 8th column
            bindCheckboxEvent('check2', 10);  // Style Ref, 9th column
            bindCheckboxEvent('check4', 11); // Color, 10th column
            bindCheckboxEvent('check5', 12); // BreakDown1, 11th column
            bindCheckboxEvent('check6', 13); // BreakDown2, 12th column
            bindCheckboxEvent('check7', 14); // Shade Number, 13th column
            bindCheckboxEvent('check8', 15); // Wash Type, 14th column
            bindCheckboxEvent('check9', 16); // GSM, 15th column
        });
 $('#addItemButton').click(function () {
            // Show the hidden window when the Add button is clicked
            $('.hidden-window').show();
        });

        // Handle the click event of the OK button inside the hidden window
        $(document).on('click', '#saveProduct', function () {
            // Do something with the data entered in the hidden window, e.g., save it or update the main view
            // You can access the input fields in the hidden window and get their values like this:
            var productName = $('#productName').val();
            var gsm = $('#gsm').val();
            // ... and so on for other input fields

            // You can also add the data to the table on the main view, similar to how you are adding data from the model
            // For example:
            $('table tbody').append('<tr><td class="text-center">' + productName + '</td><td class="text-center">...</td></tr>');

            // Hide the hidden window after handling the data
            $('.hidden-window').hide();
        });

        // Handle the click event of the CANCEL button inside the hidden window
        $(document).on('click', '.hidden-window .btn-secondary', function () {
            // Hide the hidden window when the CANCEL button is clicked
            $('.hidden-window').hide();
        });
            // Handle Save button click event
        $('#saveButton').click(function () {
            const isConfirmed = confirm("Are you sure you want to save?");
            if (isConfirmed) {

                // Get the current date and time
                let currentDate = new Date();

                // Format the date as "YYYY-MM-DD HH:mm:ss"
                let formattedDate = currentDate.toISOString().slice(0, 19).replace('T', ' ');

                let masterData = {
                    ApiNumber: '@Model.First().ApiNumber', // Use Razor syntax to fetch API number from the view model
                    SubmittedDate: formattedDate, // Use Razor syntax to fetch the submitted date from the view model
                    CustomerName: '@Model.First().CustomerName',
                        RetailerName: '@Model.First().RetailerName',
                        Remarks: '@Model.First().Remarks',
                        TotalValue: '@Model.First().TotalValue',
                        TotalQuantity: '@Model.First().TotalQty',
                    CompanyName: $('#companyName').val(),
                    Details : []
                    // Add other master data properties here
                };
                // Calculate the updated total value and total quantity
                let updatedTotalValue = 0;
                let updatedTotalQty = 0;

                $('table tbody tr').each(function () {
                    let $row = $(this);
                    let value = parseFloat($row.find('.value').text().trim()) || 0;
                    let qty = parseFloat($row.find('.booking-qty').text().trim()) || 0;


                    updatedTotalValue += value;
                    updatedTotalQty += qty;
                });

                // Update the master data with the updated totals
                masterData.TotalValue = updatedTotalValue.toFixed(2); // Convert to 2 decimal places if needed
                masterData.TotalQuantity = updatedTotalQty.toFixed(2); // Convert to 2 decimal places if needed

                // Update the elements in the <div class="col-md-4"> section with the updated values
                $('#totalValueDiv').html('<p><strong>Total Value:</strong> ' + masterData.TotalValue + '</p>');
                $('#totalQtyDiv').html('<p><strong>Total Quantity:</strong> ' + masterData.TotalQty + '</p>');

                console.log("Master Data:", masterData); // Log the masterData object


                let subData = [];
                $('table tbody tr').each(function () {
                    let $row = $(this);
                    if ($row.is(":visible")) {
                        let rowData = {
                            ApiNumber: $row.find('td:eq(0)').text().trim(),
                            ProductName: $row.find('td:eq(1)').text().trim(),
                            Measurement: $row.find('td:eq(2)').text().trim(),
                            MeasureUnit: $row.find('td:eq(3)').text().trim(),
                            BookingQty: parseFloat($row.find('td:eq(4)').text().trim()) || 0,
                            QtyInKG: parseFloat($row.find('td:eq(5)').text().trim()) || 0,
                            QuantityUnit: $row.find('td:eq(6)').text().trim(),
                            UnitPrice: parseFloat($row.find('td:eq(7)').text().trim()) || 0,
                            Val2: parseFloat($row.find('td:eq(8)').text().trim()) || 0,
                            PONumber: $row.find('td:eq(9)').text().trim(),
                            StyleRef: $row.find('td:eq(10)').text().trim(),
                            Color: $row.find('td:eq(11)').text().trim(),
                            BreakDown1: $row.find('td:eq(12)').text().trim(),
                            BreakDown2: $row.find('td:eq(13)').text().trim(),
                            ShadeNumber: $row.find('td:eq(14)').text().trim(),
                            WashType: $row.find('td:eq(15)').text().trim(),
                            GSM: $row.find('td:eq(16)').text().trim(),
                            OurRef: $('#our-reference').val(),
                            CustomerRef: $('#customer-reference').val(),
                            BondRemarks: $('#commercial-remarks').val()
                        };
                        subData.push(rowData);
                    }
                });
                masterData.Details = subData;
                console.log("Master Data:", masterData); // Log the masterData object
                console.log("Sub Data:", subData); // Log the subData array



                // Call the API to save master data
                $.post("@Url.Action("SaveApiFromBond", "Bonds")", masterData, function (response) {
                    // Handle success response
                    console.log("Master data saved successfully!");
                }).fail(function (error) {
                    // Handle error response
                    console.error("Error saving master data: ", error);
                });

                // Call the API to save sub details data
                $.post("@Url.Action("SaveApiFromBondSub", "Bonds")", { subData: JSON.stringify(subData) }, function (response) {
                    // Handle success response
                    console.log("Sub details data saved successfully!");
                }).fail(function (error) {
                    // Handle error response
                    console.error("Error saving sub details data: ", error);
                });

                alert("Data saved successfully!"); // You can remove this alert after integrating the API calls.
                window.location.href = "@Url.Action("piadvisingbond", "Bonds")";
            }
        });

        });
        $('#productId').change(function () {
            $.post("@Url.Action("GetCombination", "Bonds")", { productId: $(this).val() }, function (response) {
                // Handle success response
                console.log(response);
                if (response) {
                    $('#combinationId').empty();
                    let options = '<option value ="">Select</option>';
                    $(response).each(function () {
                        options += '<option value ="' + this.CombinationDetails + '">' + this.CombinationDetails + '</option>';
                    })
                    $('#combinationId').append(options);
                }
            }).fail(function (error) {
                // Handle error response
                console.error("Error saving master data: ", error);
            });
        });
    // Function to update the total values
    function updateTotals() {
        let totalBookingQty = 0;
        let totalQtyInKG = 0;
        let totalValue = 0;

        // Loop through each row in the table and update the totals
        $('table tbody tr').each(function () {
            let $row = $(this);
            let bookingQty = parseFloat($row.find('.booking-qty').text().trim()) || 0;
            let qtyInKG = parseFloat($row.find('.qty-in-kg').text().trim()) || 0;
            let value = parseFloat($row.find('.value').text().trim()) || 0;

            totalBookingQty += bookingQty;
            totalQtyInKG += qtyInKG;
            totalValue += value;
        });

        // Update the footer with the new totals
        $('#totalBookingQtyValue').text(totalBookingQty);
        $('#totalQtyInKGValue').text(totalQtyInKG);
        $('#totalValueValue').text(totalValue);
    }

    // Function to remove the row from the table
    function removeRow($row) {
        $row.remove();
        updateTotals(); // Update the totals after removing the row
    }

    // Bind click event to the "Remove" button
    $(document).on('click', '.remove-row-button', function () {
        var isConfirmed = confirm("Are you sure you want to remove this row?");
        if (isConfirmed) {
            // Get the parent row of the button and remove it
            var $row = $(this).closest('tr');
            removeRow($row);
        }
    });
    // Function to update the main table with edited values
    function updateTableRow(editedData, bookingSubId) {
        var editedRow = $(`tr[data-row-id="${bookingSubId}"]`);

        // Update the cells with new values
        editedRow.find('.booking-qty').text(editedData.BookingQty);
        editedRow.find('.measurement').text(editedData.Measurement);
        editedRow.find('.qty-in-kg').text(editedData.QtyInKG);
        editedRow.find('.value').text(editedData.Val2);
        // Update other cells as needed
    }

    // Handle the Edit button click event
    $('.edit-row-button').click(function () {

        var bookingSubId = $(this).closest('tr').data('row-id');
        var editedRow = $(this).closest('tr'); // Get the closest row to the clicked Edit button

        // Get the data from the main table
        var productName = editedRow.find('.text-center:nth-child(2)').text();
        var bookingQty = parseFloat(editedRow.find('.booking-qty').text());
        var measurement = parseFloat(editedRow.find('.measurement').text());
        var qtyInKG = parseFloat(editedRow.find('.qty-in-kg').text());
        var val2 = parseFloat(editedRow.find('.value').text());
        var rowSerial = editedRow.data('row-serial'); // Get the data-row-serial attribute value as the row serial number
        // Get other data as needed

        // Set the data in the modal
        $('#editModal #editProductName').val(productName);
        $('#editModal #editMeasurement').val(measurement);
        $('#editModal #editBookingQty').val(bookingQty);
        $('#editModal #editQtyInKG').val(qtyInKG);
        $('#editModal #editVal2').val(val2);
        // Set other data in the modal

        // Show the modal
        $('#editModal').modal('show');

        // Store the bookingSubId of the edited row in the modal data
        $('#editModal').data('edited-booking-sub-id', bookingSubId);
    });


    // Handle the Save Changes button click event
    $('#saveChangesBtn').click(function () {
        // Get the edited data from the modal
        var editedData = {
            BookingQty: parseFloat($('#editModal #editBookingQty').val()),
            QtyInKG: parseFloat($('#editModal #editQtyInKG').val()),
            Val2: parseFloat($('#editModal #editVal2').val()),
            Measurement: parseFloat($('#editModal #editMeasurement').val()),
            // Get other edited data from the modal
        };

        // Get the bookingSubId from the modal data
        var bookingSubId = $('#editModal').data('edited-booking-sub-id');

        // Update the main table with the edited data for the specific row
        updateTableRow(editedData, bookingSubId);

        // Initialize the select2 plugin for the hidden dropdown
        $('#productId').select2();

        // Show the hidden dropdown when the user starts typing
        $('#editProductName').on('input', function () {
            $('#productId').removeClass('d-none');
        });

        // When the user selects a product, set the value in the input field
        $('#productId').on('change', function () {
            var selectedProductName = $(this).find('option:selected').text();
            $('#editProductName').val(selectedProductName);
        });

        // When the user clears the input field, hide the dropdown again
        $('#editProductName').on('blur', function () {
            if ($(this).val() === '') {
                $('#productId').addClass('d-none');
            }
        });

        // Get the row serial number from the modal data
        var rowSerial = $('#editModal').data('edited-row-serial');

        // Update the main table with the edited data for the specific row
        updateTableRow(editedData, rowSerial);

        // Hide the modal
        $('#editModal').modal('hide');
    });
    // Handle the modal shown event to populate data from data attributes
    $('#editModal').on('shown.bs.modal', function () {
        // Get the data from data attributes and set it in the modal inputs
        $('#editModal #editProductName').val($('#editModal').data('edit-product-name'));
        $('#editModal #editBookingQty').val($('#editModal').data('edit-booking-qty'));
        $('#editModal #editQtyInKG').val($('#editModal').data('edit-qty-in-kg'));
        $('#editModal #editVal2').val($('#editModal').data('edit-val2'));
        // Set other data in the modal
    });
   

 @*let groupedData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));


        // Handle the click event of the edit button
        $('.edit-row-button').click(function () {
            // Get the row data associated with the clicked button
            const rowId = $(this).data('row-id');
            const editedRowData = groupedData.find(item => item.ApiNumber === rowId); // Get the original row data

            // Populate the modal with the row data
            $('#editProductName').val(editedRowData.ProductName);
            $('#editCombination').val(editedRowData.Measurement || '');
            $('#editPly').val(editedRowData['no; of ply']);
            $('#editMeasureUnit').val(editedRowData.MeasureUnit);
            $('#editLength').val(editedRowData.Length || '');
            $('#editWidth').val(editedRowData.Width || '');
            $('#editHeight').val(editedRowData.Height || '');
            $('#editShadeNumber').val(editedRowData['Shade Number']);
            $('#editWashType').val(editedRowData['wash type']);
            $('#editPrinted').val(editedRowData.printed || 'no');
            $('#editPerforated').val(editedRowData.perforated || 'no');
            $('#editQuantityUnit').val(editedRowData['quantity unit']);
            $('#editUnitPrice').val(editedRowData['Unit Price']);
            $('#editTotalAmount').val(editedRowData['Total amount'] || '');
            $('#editGSM').val(editedRowData.GSM || '');
            $('#editPONumber').val(editedRowData.PONumber || '');
            $('#editStyleRef').val(editedRowData.styleref);
            $('#editColor').val(editedRowData.color);
            $('#editSize').val(editedRowData.size);
            $('#editBreakDown').val(editedRowData['break down']);
            $('#editWeightInKG').val(editedRowData['weight in kg'] || '');
            $('#saveChangesBtn').data('row-id', rowId);
        });
    $('#saveChangesBtn').on('click', function () {
        const editedRowId = $(this).data('row-id');
        const editedRowData = groupedData.find(item => item.ApiNumber === editedRowId); // Get the original row data

        // Update the editedRowData with the values from the modal fields
        editedRowData.ProductName = $('#editProductName').val();
        editedRowData.Measurement = $('#editCombination').val();
        editedRowData['no; of ply'] = $('#editPly').val();
        editedRowData.MeasureUnit = $('#editMeasureUnit').val();
        editedRowData.Length = $('#editLength').val();
        editedRowData.Width = $('#editWidth').val();
        editedRowData.Height = $('#editHeight').val();
        editedRowData['Shade Number'] = $('#editShadeNumber').val();
        editedRowData['wash type'] = $('#editWashType').val();
        editedRowData.printed = $('#editPrinted').val();
        editedRowData.perforated = $('#editPerforated').val();
        editedRowData['quantity unit'] = $('#editQuantityUnit').val();
        editedRowData['Unit Price'] = $('#editUnitPrice').val();
        editedRowData['Total amount'] = $('#editTotalAmount').val();
        editedRowData.GSM = $('#editGSM').val();
        editedRowData.PONumber = $('#editPONumber').val();
        editedRowData.styleref = $('#editStyleRef').val();
        editedRowData.color = $('#editColor').val();
        editedRowData.size = $('#editSize').val();
        editedRowData['break down'] = $('#editBreakDown').val();
        editedRowData['weight in kg'] = $('#editWeightInKG').val();

        // Update the table row with the edited values (optional)
        const editedRow = $('tr[data-row-id="' + editedRowId + '"]');
        editedRow.find('.product-name').text(editedRowData.ProductName);
        editedRow.find('.combination').text(editedRowData.Measurement || '');
        editedRow.find('.ply').text(editedRowData['no; of ply']);
        editedRow.find('.measure-unit').text(editedRowData.MeasureUnit);
        editedRow.find('.length').text(editedRowData.Length || '');
        editedRow.find('.width').text(editedRowData.Width || '');
        editedRow.find('.height').text(editedRowData.Height || '');
        // ... and so on for other fields.

        // Close the modal
        $('#editModal').modal('hide');
    });*@

    // function updateTableRow(rowId, editedRowData) {
    //    const editedRow = $('tr[data-row-id="' + rowId + '"]');
    //    editedRow.find('.product-name').text(editedRowData.ProductName);
    //    editedRow.find('.combination').text(editedRowData.Measurement || '');
    //    editedRow.find('.ply').text(editedRowData['no; of ply']);
    //    editedRow.find('.measure-unit').text(editedRowData.MeasureUnit);
    //    editedRow.find('.length').text(editedRowData.Length || '');
    //    editedRow.find('.width').text(editedRowData.Width || '');
    //    editedRow.find('.height').text(editedRowData.Height || '');
    //    editedRow.find('.shade-number').text(editedRowData['Shade Number']);
    //    editedRow.find('.wash-type').text(editedRowData['wash type']);
    //    editedRow.find('.printed').text(editedRowData.printed || 'no');
    //    editedRow.find('.perforated').text(editedRowData.perforated || 'no');
    //    editedRow.find('.quantity-unit').text(editedRowData['quantity unit']);
    //    editedRow.find('.unit-price').text(editedRowData['Unit Price']);
    //    editedRow.find('.total-amount').text(editedRowData['Total amount'] || '');
    //    editedRow.find('.gsm').text(editedRowData.GSM || '');
    //    editedRow.find('.po-number').text(editedRowData.PONumber || '');
    //    editedRow.find('.style-ref').text(editedRowData.styleref);
    //    editedRow.find('.color').text(editedRowData.color);
    //    editedRow.find('.size').text(editedRowData.size);
    //    editedRow.find('.break-down').text(editedRowData['break down']);
    //    editedRow.find('.weight-in-kg').text(editedRowData['weight in kg'] || '');
    //}

    //// Handle the click event of the edit button
    //$('.edit-row-button').click(function () {
    //    // Get the row data associated with the clicked button
    //    const rowId = $(this).data('row-id');
    //    const editedRow = $('tr[data-row-id="' + rowId + '"]');

    //    // Populate the modal with the row data
    //    $('#editProductName').val(editedRow.find('.product-name').text());
    //    $('#editCombination').val(editedRow.find('.combination').text());
    //    $('#editPly').val(editedRow.find('.ply').text());
    //    $('#editMeasureUnit').val(editedRow.find('.measure-unit').text());
    //    $('#editLength').val(editedRow.find('.length').text());
    //    $('#editWidth').val(editedRow.find('.width').text());
    //    $('#editHeight').val(editedRow.find('.height').text());
    //    $('#editShadeNumber').val(editedRow.find('.shade-number').text());
    //    $('#editWashType').val(editedRow.find('.wash-type').text());
    //    $('#editPrinted').val(editedRow.find('.printed').text() === 'Yes' ? 'yes' : 'no');
    //    $('#editPerforated').val(editedRow.find('.perforated').text() === 'Yes' ? 'yes' : 'no');
    //    $('#editQuantityUnit').val(editedRow.find('.quantity-unit').text());
    //    $('#editUnitPrice').val(editedRow.find('.unit-price').text());
    //    $('#editTotalAmount').val(editedRow.find('.total-amount').text());
    //    $('#editGSM').val(editedRow.find('.gsm').text());
    //    $('#editPONumber').val(editedRow.find('.po-number').text());
    //    $('#editStyleRef').val(editedRow.find('.style-ref').text());
    //    $('#editColor').val(editedRow.find('.color').text());
    //    $('#editSize').val(editedRow.find('.size').text());
    //    $('#editBreakDown').val(editedRow.find('.break-down').text());
    //    $('#editWeightInKG').val(editedRow.find('.weight-in-kg').text());

    //    // Show the modal
    //    $('#editModal').modal('show');
    //});

    //// Save changes when the "Save Changes" button is clicked
    //$('#saveChangesBtn').click(function () {
    //    // Get the row ID associated with the modal
    //    const rowId = $('#editModal').data('row-id');
    //    const editedRow = $('tr[data-row-id="' + rowId + '"]');

    //    // Update the table row with the edited values
    //    editedRow.find('.product-name').text($('#editProductName').val());
    //    editedRow.find('.combination').text($('#editCombination').val());
    //    editedRow.find('.ply').text($('#editPly').val());
    //    editedRow.find('.measure-unit').text($('#editMeasureUnit').val());
    //    editedRow.find('.length').text($('#editLength').val());
    //    editedRow.find('.width').text($('#editWidth').val());
    //    editedRow.find('.height').text($('#editHeight').val());
    //    editedRow.find('.shade-number').text($('#editShadeNumber').val());
    //    editedRow.find('.wash-type').text($('#editWashType').val());
    //    editedRow.find('.printed').text($('#editPrinted').val() === 'yes' ? 'Yes' : 'No');
    //    editedRow.find('.perforated').text($('#editPerforated').val() === 'yes' ? 'Yes' : 'No');
    //    editedRow.find('.quantity-unit').text($('#editQuantityUnit').val());
    //    editedRow.find('.unit-price').text($('#editUnitPrice').val());
    //    editedRow.find('.total-amount').text($('#editTotalAmount').val());
    //    editedRow.find('.gsm').text($('#editGSM').val());
    //    editedRow.find('.po-number').text($('#editPONumber').val());
    //    editedRow.find('.style-ref').text($('#editStyleRef').val());
    //    editedRow.find('.color').text($('#editColor').val());
    //    editedRow.find('.size').text($('#editSize').val());
    //    editedRow.find('.break-down').text($('#editBreakDown').val());
    //    editedRow.find('.weight-in-kg').text($('#editWeightInKG').val());


    //        // Close the modal
    //        $('#editModal').modal('hide');
    //    });
    // Call the updateTotals function initially to display the correct initial totals
     // Function to format a number with four digits after the decimal point
    function formatNumberWithFourDigits(number) {
        return parseFloat(number).toFixed(4).replace(/\.?0*$/, '');
    }

    // Update the values in the table with four digits after the decimal point
    $(document).ready(function () {
        var totalBookingQty = "@totalBookingQty"; // Replace with the dynamic value for totalBookingQty
        var totalQtyInKG = "@totalQtyInKG"; // Replace with the dynamic value for totalQtyInKG
        var totalValue = "@totalValue"; // Replace with the dynamic value for totalValue

        $('#totalBookingQtyValue').text(formatNumberWithFourDigits(totalBookingQty));
        $('#totalQtyInKGValue').text(formatNumberWithFourDigits(totalQtyInKG));
        $('#totalValueValue').text(formatNumberWithFourDigits(totalValue));
    });
    updateTotals();
</script>
