@model IEnumerable<PIAdvisingApp.ViewModels.BondDataVm>



<div class="modal fade" id="bond-modal" tabindex="-1" role="dialog" aria-labelledby="bond-modal-label" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl modal-dialog-scrollable" role="document">
        <div class="modal-content">
          
            <div class="modal-body" style="max-height: 80vh; overflow-y: auto;">
                <div class="row">
                    <div class="col-md-4">
                        <p><strong>Customer Name:</strong> @Model.First().CustomerName</p>
                        <p><strong>Retailer Name:</strong> @Model.First().RetailerName</p>
                        <p><strong>Remarks:</strong> @Model.First().Remarks</p>
                        <div class="mt-3">
                            <label for="customer-reference">Customer Reference:</label>
                            <div class="input-group">
                                <!-- Set width to 550px and height to 90px -->
                                <textarea class="form-control" id="customer-reference" name="customer-reference" rows="3" style="width: 550px; height: 90px;">@Model.First().CustomerRef</textarea>
                                <div class="input-group-append">
                                    <!-- "Set" Button -->
                                    <button class="btn btn-primary" id="setButton">Set</button>
                                    <!-- "Edit" Button -->
                                    <button class="btn btn-primary" id="editButton">Edit</button>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-md-4">
                        <p><strong>Total Value:</strong> @Model.First().TotalValue</p>
                        <p><strong>Total Quantity:</strong> @Model.First().TotalQty</p>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="companyName"><strong>Company Name:</strong></label>
                            <select class="form-control" id="companyName" name="companyName">
                                <option value="">Choose Company</option>
                                <option value="1">KDS Accessories Ltd.</option>
                                <option value="2">KDS Thread Ltd.</option>
                                <option value="3">KDS Poly Industries Ltd.</option>
                                @*<option value="4">Dominox IM</option>*@
                                <option value="5">KDS Accessories Ltd. (Unit 2)</option>
                                <option value="6">KDS Thread Ltd. (Unit 2)</option>
                            </select>
                        </div>
                        <button class="btn btn-primary" id="setCompanyButton" disabled>Set</button>
                        <!-- Our Reference text input field -->
                        <div class="mt-3">
                            <label for="our-reference">Our Reference:</label>
                            <textarea class="form-control" id="our-reference" name="our-reference" rows="3" style="width: 300px; height: 100px; resize: both;">
                    @Model.First().OurRef
                </textarea>
                        </div>
                    </div>
                </div>

                <div class="mt-3">
                    <h5>Include Info</h5>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check1" data-label="PO">
                                <label class="form-check-label" for="check1">PO</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check2" data-label="Style">
                                <label class="form-check-label" for="check2">Style</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check3" data-label="Size">
                                <label class="form-check-label" for="check3">Size</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check4" data-label="Colour">
                                <label class="form-check-label" for="check4">Colour</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check5" data-label="BreakDown1">
                                <label class="form-check-label" for="check5">BreakDown1</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check6" data-label="BreakDown2">
                                <label class="form-check-label" for="check6">BreakDown2</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check7" data-label="Shade">
                                <label class="form-check-label" for="check7">Shade</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check8" data-label="WashType">
                                <label class="form-check-label" for="check8">Wash Type</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check9" data-label="GSM">
                                <label class="form-check-label" for="check9">GSM</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input include-info" type="checkbox" id="check10" data-label="KBPNo">
                                <label class="form-check-label" for="check10">KBP No</label>
                            </div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-primary" id="addItemButton" data-toggle="modal" data-target="#productModal">Add Item</button>
                        <button class="btn btn-secondary">Copy</button>
                        <button class="btn btn-primary refresh-button">Refresh</button>
                    </div>
                </div>
            </div>

            <div class="table-responsive" style="overflow-y: auto; max-height: calc(80vh - 250px);">
                <table class="table mt-3">
                    <thead>
                        <tr>
                            <th class="text-center">Product Name</th>
                            <th class="text-center">Measurement</th>
                            <th class="text-center">Measure Unit</th>
                            <th class="text-center">Booking Qty</th>
                            <th class="text-center">Qty In KG</th>
                            <th class="text-center">Quantity Unit</th>
                            <th class="text-center">Unit Price</th>
                            <th class="text-center">Value</th>
                            <th class="text-center" id="customer-specification-th">Customer Specification</th>
                            <!-- ... Include Info columns if needed ... -->
                            <!-- ... -->
                            @*<th class="text-center">Actions</th>*@
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            // Grouping the data by Product Name, Measurement, and Measure Unit while summing the Booking Qty
                            var groupedData = Model.GroupBy(x => new { x.ProductName, x.Measurement, x.MeasureUnit, x.QuantityUnit, x.UnitPrice, })
                                                  .Select(g => new
                                                  {
                                                      ProductName = g.Key.ProductName,
                                                      Measurement = g.Key.Measurement,
                                                      MeasureUnit = g.Key.MeasureUnit,
                                                      BookingQty = g.Sum(x => x.BookingQty),

                                                      QtyInKG = g.Sum(x => x.QtyInKG),
                                                      QuantityUnit = g.Key.QuantityUnit,
                                                      UnitPrice = g.Key.UnitPrice,
                                                      Val2 = g.Sum(x => x.Val2),

                                                      // Add other properties ...
                                                  });
                        }

                        @foreach (var item in groupedData)
                        {
                        <tr>
                            <td class="text-center">@item.ProductName</td>
                            <td class="text-center">@item.Measurement</td>
                            <td class="text-center">@item.MeasureUnit</td>
                            <td class="text-center">@item.BookingQty</td>
                            <td class="text-center">@item.QtyInKG</td>
                            <td class="text-center">@item.QuantityUnit</td>
                            <td class="text-center">@item.UnitPrice</td>
                            <td class="text-center">@item.Val2</td>

                            <td class="text-center customer-specification">
                                <!-- Customer Specification content will be dynamically added here -->
                            </td>

                        </tr>
                        }
                    </tbody>
                </table>
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="saveButton" disabled>Save</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div id="product-modal-container"></div>



<script>
$(document).ready(function () {
        // Initially, set the textarea as read-only
        $("#customer-reference").prop("readonly", true);

        // "Set" Button click event handler
        $("#setButton").click(function () {
            $("#customer-reference").prop("readonly", true);
        });

        // "Edit" Button click event handler
        $("#editButton").click(function () {
            $("#customer-reference").prop("readonly", false);
        });
});
</script>








@*<script>
        $(document).ready(function () {



            let selectedCompanyId = null;

            // Handle company name dropdown change event
            $('#companyName').change(function () {
                selectedCompanyId = $(this).val();
                const isCompanySelected = !!selectedCompanyId;
                $('#setCompanyButton').prop('disabled', !isCompanySelected);
                $('#saveButton').prop('disabled', !isCompanySelected);
            });

            // Handle Set button click event
            $('#setCompanyButton').click(function () {
                // If you want to do something when the Set button is clicked,
                // you can perform additional actions here.
                // For example, you can update the UI to reflect the selected company.
            });


            // Handle Save button click event
            $('#saveButton').click(function () {
                const isConfirmed = confirm("Are you sure you want to save?");
                if (isConfirmed) {

                    // Get the current date and time
                    let currentDate = new Date();

                    // Format the date as "YYYY-MM-DD HH:mm:ss"
                    let formattedDate = currentDate.toISOString().slice(0, 19).replace('T', ' ');

                    let masterData = {
                        ApiNumber: '@Model.First().ApiNumber', // Use Razor syntax to fetch API number from the view model
                        SubmittedDate: formattedDate, // Use Razor syntax to fetch the submitted date from the view model
                        CustomerName: '@Model.First().CustomerName',
                         RetailerName: '@Model.First().RetailerName',
                         Remarks: '@Model.First().Remarks',
                         TotalValue: '@Model.First().TotalValue',
                         TotalQuantity: '@Model.First().TotalQty',
                        CompanyName: $('#companyName').val(),
                        Details : []
                        // Add other master data properties here
                    };
                    console.log("Master Data:", masterData); // Log the masterData object


                    let subData = [];
                    $('table tbody tr').each(function () {
                        let $row = $(this);
                        let rowData = {
                            ApiNumber: $row.find('td:eq(0)').text().trim(),
                            BookingNo: $row.find('td:eq(1)').text().trim(),
                            CategoryName: $row.find('td:eq(2)').text().trim(),
                            ProductName: $row.find('td:eq(3)').text().trim(),
                            Measurement: $row.find('td:eq(4)').text().trim(),
                            MeasureUnit: $row.find('td:eq(5)').text().trim(),
                            UnitPrice: $row.find('td:eq(6)').text().trim(),
                            BookingQty: $row.find('td:eq(7)').text().trim(),
                            QuantityUnit: $row.find('td:eq(8)').text().trim(),
                            Val2: $row.find('td:eq(9)').text().trim(),
                            BondRemarks: $row.find('td.customer-spec-text').text().trim(),
                        };
                        subData.push(rowData);
                    });
                    masterData.Details = subData;
                    console.log("Master Data:", masterData); // Log the masterData object
                    console.log("Sub Data:", subData); // Log the subData array



                    // Call the API to save master data
                    $.post("@Url.Action("SaveApiFromBond", "Bonds")", masterData, function (response) {
                        // Handle success response
                        console.log("Master data saved successfully!");
                    }).fail(function (error) {
                        // Handle error response
                        console.error("Error saving master data: ", error);
                    });

                    // Call the API to save sub details data
                    $.post("@Url.Action("SaveApiFromBondSub", "Bonds")", { subData: JSON.stringify(subData) }, function (response) {
                        // Handle success response
                        console.log("Sub details data saved successfully!");
                    }).fail(function (error) {
                        // Handle error response
                        console.error("Error saving sub details data: ", error);
                    });

                    alert("Data saved successfully!"); // You can remove this alert after integrating the API calls.
                }
            });
        });
    </script>*@